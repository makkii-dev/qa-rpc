TestSet	execute	usePreparedData	testDescription	id	method	params	runtimeVal	storeVariables	preStoreVariables
smoke eth_accounts	x								
	x		get all the accounts in current kernel	Smoke-1	requestMethod.eth_accounts	[]			
	x		validate response	smoke-1-vali	validFormat	[matches,ARRAY]			
									
smoke eth_blockNumber	x								
	x		get the highest block number	Smoke-2	requestMethod.eth_blockNumber	[]			
	x		validate response	Smoke-2-vali	validFormat	[match,NUMBER]			
									
Smoke eth_coinbase	x								
	x		get the coin base	Smoke-4	requestMethod.eth_coinbase	[]			
	x		validate response	Smoke-4-vali	validFormat	[match,ACCOUNT_FORMAT]			
									
smoke eth_gasPrice	x								
	x		get the gas price	Smoke-7	requestMethod.eth_gasPrice	[]			
	x		validate response	Smoke-7-vali	validFormat	[match,HEX]			
									
Smoke eth_getBalance	x								
	x		get balance for the latest block	Smoke-8-latest	requestMethod.eth_getBalance	[_testAcc,latest]			testAcc=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		validate response latest block	Smoke-8-latest-vali	validFormat	[match,HEX]			
	x		get balance for the earliest block	Smoke-8-earliest	requestMethod.eth_getBalance	[_testAcc,earliest]			
	x		validate response eariltest block	Smoke-8-earliest-vali	validFormat	[match,HEX]			
	x		get balance for the pending block	Smoke-8-pending	requestMethod.eth_getBalance	[_testAcc,pending]			
	x		validate response pending block	Smoke-8-pending-vali	validFormat	[match,HEX]			
	x		get balance for the number block	Smoke-8-number	requestMethod.eth_getBalance	[_testAcc,0x0]			
	x		validate response the number block	Smoke-8-number-vali	validFormat	[match,HEX]			
									
Smoke eth_getBlockByNumber and eth_getBlockByHash	x								
	x		get block by number - latest	Smoke-10-latest	requestMethod.eth_getBlockByNumber	[latest,false]			
	x		validate response latest block	Smoke-10-latest-vali	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by number - earliest	Smoke-10-earliest	requestMethod.eth_getBlockByNumber	[earliest,false]		result.hash=>blockHash	
	x		validate response eariltest block	Smoke-10-earliest-vali	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by number- pending	Smoke-10-pending	requestMethod.eth_getBlockByNumber	[pending,true]			
	x		validate response eariltest block	Smoke-10-pending-vali	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by number – number-0x0	Smoke-10-number-0x0	requestMethod.eth_getBlockByNumber	[0x0,true]			
	x		validate response 0x0 block	Smoke-10-number-vali-0x0	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by number – number-0	Smoke-10-number-0	requestMethod.eth_getBlockByNumber	[0,true]			
	x		validate response 0 block	Smoke-10-number-vali-0	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by number – miss params	Smoke-10-miss-param	requestMethod.eth_getBlockByNumber	[0]			
	x		validate response eariltest block	Smoke-10-missing-param	validFormat	[error]			
	x		get block by hash	Smoke-9	requestMethod.eth_getBlockByHash	[_blockHash,true]			
	x		validate response eariltest block	Smoke-9-vali	validFormat	[matches,VALID_BLOCK_OBJECT]			
	x		get block by hash miss param	Smoke-9-miss-param	requestMethod.eth_getBlockByHash	[true]			
	x		validate response eariltest block	Smoke-9-miss-param-vali	validFormat	[error]			
smoke eth_getBlockTransactionCountByNumber & Hash	x	x							
	x		get block tx counts by number -latest	Smoke-12-latest	requestMethod.eth_getBlockTransactionCountByNumber	[latest]			
	x		validate response latest block	Smoke-12-latest-vali	validFormat	[matches,HEX]			
	x		get block tx counts by number -earliest	Smoke-12-earliest	requestMethod.eth_getBlockTransactionCountByNumber	[earliest]			
	x		validate response earliest block	Smoke-12-earliest-vali	validFormat	[matches,HEX]			
	x		get block tx counts by number -pending	Smoke-12-pending	requestMethod.eth_getBlockTransactionCountByNumber	[pending]			
	x		validate response pending block	Smoke-12-pending-vali	validFormat	[matches,HEX]			
	x		get block tx counts by number -0x0	Smoke-12-number-0x0	requestMethod.eth_getBlockTransactionCountByNumber	[0x0]			
	x		validate response 0x0 block	Smoke-12-number-vali-0x0	validFormat	[matches,HEX]			
	x		get block tx counts by number -0	Smoke-12-number-0	requestMethod.eth_getBlockTransactionCountByNumber	[0]			
	x		validate response 0 block	Smoke-12-number-0-vali	validFormat	[matches,HEX]			
	x		get block tx counts by number – miss params	Smoke-12-miss-params	requestMethod.eth_getBlockTransactionCountByNumber	[]			
	x		validate response missing params	Smoke-12-miss-params-vali	validFormat	[error]			
	x		get block tx counts by hash	Smoke-11	requestMethod.eth_getBlockTransactionCountByHash	[_blockHash]			
	x		validate response by hash	Smoke-11-vali	validFormat	[matches,HEX]			
	x		get block tx counts by hash – miss param	Smoke-11-miss-param	requestMethod.eth_getBlockTransactionCountByHash	[]			
	x		validate response by hash missing params	Smoke-11-miss-param-vali	validFormat	[error]			
									
Smoke eth_getCompilers	x								
	x		get support compiler names	Smoke-14	requestMethod.eth_getCompilers	[]			
	x		validate response	Smoke-14-vali	validFormat	[contains,solidity]			
									
Smoke eth_mining	x								
	x		check if current client is mining	Smoke-23	requestMethod.eth_mining	[]			
	x		validate response	Smoke-23-vali	validFormat	[matches,BOOLEAN]			
									
Smoke eth_protocolVersion	x								
	x		get Protocol version	Smoke-27	requestMethod.eth_protocolVersion	[]			
	x		validate response	Smoke-27-vali	validFormat	[matches,STRING]			
									
smoke eth_syncing	x								
	x		check if the current client is syncing	Smoke-34	requestMethod.eth_syncing	[]			
	x		validate response	smoke-34-vali	validFormat	[matches,BOOLEAN]			
									
smoke personal_isAccountUnlocked	x								
	x		check if the account is unlocked	Smoke-36	requestMethod.personal_isAccountUnlocked	[0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c]			
	x		validate response	Smoke-36-vali	validFormat	[matches,BOOLEAN]			
	x		personal_isAccountUnlocked -missing account	Smoke-36-miss-account	requestMethod.personal_isAccountUnlocked	[]			
	x		validate response	smoke-36-miss-account-vali	validFormat	[error]			
									
smoke personal_lockAccount and UnlockAccount	x								
	x		Pre-step: Rpc request to check if the account is locked	Smoke-36	requestMethod.personal_isAccountUnlocked	[_testAcc]			testAcc=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		Pre-step: validate response to make sure the account is locked	Smoke-36-vali	validFormat	[equal,false]			
	x		Rpc request to unlock account with valid password	Smoke-43-correct	requestMethod.personal_unlockAccount	[_testAcc,password,25]			
	x		validate response of unlocking account with vaild password	Smoke-43-correct-vali	validFormat	[equal,true]			
	x		Rpc request to check if the test account is unlocked	Smoke-36	requestMethod.personal_isAccountUnlocked	[_testAcc]			
	x		validate response to make sure the account is unlocked	Smoke-36-vali	validFormat	[equal,true]			
	x		lock an account with valid passwrod	Smoke-38-valid-ps	requestMethod.personal_lockAccount	[_testAcc,password]			
	x		validate response for lock personal Account successfully	Smoke-38-valid-ps-vali	validFormat	[equal,true]			
									
	x		Rpc request to unlock account with valid password	Smoke-43-correct	requestMethod.personal_unlockAccount	[_testAcc,password,25]			
	x		Pre-step: Rpc request to check if the account is unlocked	Smoke-36	requestMethod.personal_isAccountUnlocked	[_testAcc]			
	x		Pre-step: validate response to make sure the account is unlocked	Smoke-36-vali	validFormat	[equal,true]			
	x		lock an account with invalid password	Smoke-38-invalid-ps	requestMethod.personal_lockAccount	[_testAcc,wrong]			
	x		validate response	Smoke-38-invalid-ps-vali	validFormat	[error]			
	x		lock an account missing one params	Smoke-38-miss-param	requestMethod.personal_lockAccount	[_testAcc]			
	x		validate response	Smoke-38-miss-param-vali	validFormat	[error]			
	x		lock an account with account not in system	Smoke-38-invalid-acc	requestMethod.personal_lockAccount	[0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2d,password]			
	x		validate response	Smoke-38-invalid-acc-vali	validFormat	[error]			
	x		Rpc request to check if the account is locked	Smoke-36	requestMethod.personal_isAccountUnlocked	[_testAcc]			
	x		validate response to make sure the account is locked	Smoke-36-vali	validFormat	[equal,true]			
	x		wait for 25 second	Smoke-help	helper.delay	[25]			
	x		Rpc request to check if the account is locked	Smoke-36	requestMethod.personal_isAccountUnlocked	[_testAcc]			
	x		validate response to make sure the account is locked	Smoke-36-vali	validFormat	[equal,false]			
	x		unlock account with wrong password	Smoke-43-wrong	requestMethod.personal_unlockAccount	[_testAcc,wrong,100]			
	x		validate response for unlock account with wrong password	Smoke-43-wrong-vali	validFormat	[equal,false]			
	x		unlock invalid account with password	Smoke-43-wrong-acc	requestMethod.personal_unlockAccount	[0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2d,wrong,100]			
	x		validate response for unlock invalid account	Smoke-43-wrong-acc-vali	validFormat	[equal,false]			
									
smoke eth_newAccount	x								
	x		create a new Account without password	Smoke-39-no-ps	requestMethod.personal_newAccount	[]			
	x		validate response new account without password	Smoke-39-no-ps-vali	validFormat	[error]			
	x		create a new Account with password	Smoke-39	requestMethod.personal_newAccount	[password]		result=>newAccount	
	x		validate response new account without password	Smoke-39-vali	validFormat	[matches,ACCOUNT_FORMAT]			
	x		check if new account created in the system	Smoke-39-vali-list	requestMethod.eth_accounts	[]			
	x		validate response of checking if new account created in the system	Smoke-39-vali-list-vali	validFormat	[contains,_newAccount]			
	x		check if new account listed in the system using personal_listAccounts	Smoke-37	requestMethod.personal_listAccounts	[]			
	x		validate response of checking if new account listed in the system using personal_listAccounts	Smoke-37-vali	validFormat	[contains,_newAccount]			
									
smoke personal_sendTransaction	x								
	x		Pre-validation: restore the balance of the accounts before operation	Smoke-40-pre-vali	validationFunction.balanceValidate.pre	{from:_acc1,to:_acc2,value:123123123123}			acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334,acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x	x	unlock the sender’s account for one time use and send the a transaction	Smoke-40	requestMethod.personal_sendTransaction	[{},password]			
	x		post-validation: compare the balance of the accounts after the operation	Smoke-40-post-vali	validationFunction.balanceValidate.post				
	x		Personal send a transaction – invalid password	Smoke-40-invalid-ps	requestMethod.personal_sendTransaction	[{from:_acc2,to:_acc1,value:100},wrong]			
	x		validate response-40-invalid-ps	Smoke-40-invalid-ps-vali	validFormat	[error]			
	x		personal send a transaction – missing params	Smoke-40-miss-param	requestMethod.personal_sendTransaction	[{from:_acc2,to:_acc1,value:100}]			
	x		validate response-40-miss-param	Smoke-40-invalid-ps-vali	validFormat	[error,PARAMS_FORMAT_ERROR]			
	x		Pre-validation: restore the balance of the accounts before operation	Smoke-40-custom-gasPrice-pre-vali	validationFunction.balanceValidate.pre	{from:_acc1,to:_acc2,value:123123123123,gasPrice:100000000000}			
	x	x	unlock the sender’s account for one time use and send the a transaction	Smoke-40-custom-gasPrice-pre-vali	requestMethod.personal_sendTransaction	[{},password]			
	x		post-validation: compare the balance of the accounts after the operation	Ssmoke-40-custom-gasPrice-post-vali	validationFunction.balanceValidate.post				
									
smoke personal_sign	x								
	x		sign a message	Smoke-41	requestMethod.personal_sign	[0x123456,_acc1,password]		result=>signedMsg	acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
	x		validate response for sign a message	Smoke-41-vali	validFormat	[matches,BINARY]			
	x		sign a message with invalid password	Smoke-41-invalid-ps	requestMethod.personal_sign	[0x123456,_acc1,wrong]			
	x		validate response for sign a message with invalid password	Smoke-41-invalid-ps-vali	validFormat	[error]			
	x		sign a message missing param	Smoke-41-miss-param	requestMethod.personal_sign	[0x123456,_acc1]			
	x		validate response for sign a message	Smoke-41-miss-param-vali	validFormat	[error]			
	x		sign an invalid encoded message	Smoke-41-invalid-msg	requestMethod.personal_sign	[0x02345,_acc1,password]			
	x		validate response for sign a message	Smoke-41-invalid-msg-vali	validFormat	[error]			
smoke eth_sign required smoke personal_sign	x	x							
	x		Pre-step: Rpc request to unlock account to sign	smoke-30-pre	requestMethod.personal_unlockAccount	[_acc1,password,60]			acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		sign a message	Smoke-30	requestMethod.eth_sign	[_acc1,0x123456]			
	x		validate response for sign a message	Smoke-30-vali	validFormat	[matches,BINARY]			
	x		validate response for sign a message-value	Smoke-30-vali-2	validFormat	[equal,_signedMsg]			
	x		sign a message with invalid password	Smoke-30-locked-account	requestMethod.eth_sign	[_acc2,0x123456]			
	x		validate response for sign a message with invalid password	Smoke-30-locked-account-vali	validFormat	[error]			
	x		sign a message missing param	Smoke-30-miss-param	requestMethod.eth_sign	[_acc1]			
	x		validate response for sign a message	Smoke-30-miss-param-vali	validFormat	[error,PARAMS_FORMAT_ERROR]			
	x		sign an invalid encoded message	Smoke-30-invalid-msg	requestMethod.eth_sign	[_acc1,0x12345]			
	x		validate response for sign a message	Smoke-30-invalid-msg-vali	validFormat	[error,PARAMS_FORMAT_ERROR]			
									
smoke personal_signTransaction, eth_signTransaction and eth_sendRawTransaction	x								
	x		sign a transaction using personal_signTx	Smoke-42	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:100},password]		result.raw=>txRaw,result.tx.hash=>computeTxHash,result.tx=>tx	acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334,acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		validate response-personal_signTx	Smoke-42-vali	validFormat	[matches,VALID_SIGN_TRANSACTION]			
	x		Pre-validation: restore the balance of the accounts before operation	Smoke-42-28-pre	validationFunction.balanceValidate.pre	_tx			
	x		send the signed transaction to avoid nonce gap issue	Smoke-28-frompsigntx	requestMethod.eth_sendRawTransaction	[_txRaw]		result=>txHash	
	x		validate response or eth_sendRawTransaction	Smoke-28-frompsigntx-vali	validFormat	[equal,_computeTxHash]			
	x		delay for 5 sec	Helper-delay-5	helper.delay	[5]			
	x		get Tx Object	smoke-19-p-raw	requestMethod.eth_getTransactionByHash	[_txHash]			
	x		validate response	smoke-19-p-raw-vali	validFormat	[matches,VALID_TX]			
	x		post-validation: compare the balance of the accounts after the operation	Smoke-42-28-post	validationFunction.balanceValidate.post				
	x		unlock account to sign a tx using eth_sign	Smoke-pre-43	requestMethod.personal_unlockAccount	[_acc1,password,240]			acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334,acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		sign a transaction using eth_signTransaction	Smoke-31	requestMethod.eth_signTransaction	[{from:_acc1,to:_acc2,value:0x100}]		result.raw=>txRaw,result.tx.hash=>computeTxHash,result.tx=>tx	
	x		validate response-eth_signTx	Smoke-31-vali	validFormat	[matches,VALID_SIGN_TRANSACTION]			
	x		Pre-validation: restore the balance of the accounts before operation	Smoke-31-28-pre	validationFunction.balanceValidate.pre	_tx			
	x		send the signed transaction to avoid nonce gap issue	Smoke-28-frompsigntx	requestMethod.eth_sendRawTransaction	[_txRaw]			
	x		validate response or eth_sendRawTransaction	Smoke-28-frompsigntx-vali	validFormat	[equal,_computeTxHash]			
	x		post-validation: compare the balance of the accounts after the operation	Smoke-42-28-post	validationFunction.balanceValidate.post				
									
smoke personal_signTransaction invalid	x	x							
	x		Personal sign a transaction – invalid password	Smoke-40-invalid-ps	requestMethod.personal_sign	[0x123456,_acc1,wrong]			
	x		validate response	Smoke-40-invalid-ps-vali	validFormat	[error]			
	x		personal sign a transaction – missing params	Smoke-40-miss-param	requestMethod.personal_sign	[{from:acc1,to:acc2,value:100}]			
	x		validate response	Smoke-40-miss-param-vali	validFormat	[error]			
									
smoke net module_solo node	x								
	x		check if net is listening to its peers	Smoke-44-solo	requestMethod.net_listening	[]			
	x		validate response for net_listening	Smoke-44-solo-vali	validFormat	[equal,true]			
	x		check the number of peers	Smoke-45-solo	requestMethod.net_peerCount	[]			
	x		validate response for net_peerCount	Smoke-45-solo-vali	validFormat	[equal,0]			
	x		check net version	Smoke-46	requestMethod.net_version	[]			
	x		validate response for net_version	Smoke-46-vali	validFormat	[match,STRING]			
									
smoke other module	x								
	x		check available rpc modules	Smoke-47	requestMethod.rpc_modules	[]			
			validate response for rpc_modules	Smoke-47-vali	validFormat	[match,RPC_MODULES]			
	x		check web client version	Smoke-49	requestMethod.web3_clientVersion	[]			
	x		validate response for web3_clientVersion	Smoke-49-vali	validFormat	[matches,STRING]			
									
smoke contract related methods	x								
	x		compile contract	Smoke-5	requestMethod.eth_compileSolidity	recursive.sol			acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
	x		validate response for compile contract	Smoke-5-vali	validFormat	[contract]			
	x		helper function to compose the contract	helper	helper.newContract	[Recursive]			
	x	x	estimate contract deployment	Smoke-6	requestMethod.eth_estimateGas	[{from:_acc1}]			
	x		validate response of contract deployment estimation	Smoke-6-vali	validFormat	[match,HEX]			
	x		helper function to compose the contract	helper	helper.newContract	[Recursive]			
	x		unlock account to send contract	Pre-0	requestMethod.personal_unlockAccount	[_acc1,password,240]			
	x		validate the account is unlocked	Pre-0-vali	validFormat	[equal,true]			
	x	x	deploy the contract	Smoke-40-deploy	requestMethod.eth_sendTransaction	[{from:_acc1,gas:5000000}]			
	x		get contract receipt and restore the startBlockNumber	Smoke-40-21	requestMethod.eth_getTransactionReceipt	[_txHash]		result.blockNumber=>startBlockNumber	
	x		Validate contract receipt and restore the startBlockNumber	Smoke-40-21-vali	validFormat	[match,VALID_TX_RECEIPT]			
	x		get code on deployed address	Smoke-13	requestMethod.eth_getCode	[_contractAddress]			
	x		validate getCode result equal to the deployment code	Smoke-13-vali	validFormat	[deployedCode,_contract.Recursive.code]			
	x		helper prepare contract function calls	helper	helper.prepareContractCall	[f,_contractAddress,3]			
	x	x	send a method of a contract	smoke-40-fun-call	requestMethod.eth_sendTransaction	[{from:_acc1,to:_contractAddress}]			
	x		get contract function call method receipt	Smoke-40-21-func-call	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		validate log events in receipt	Smoke-40-21-func-call-vali	validationFunction.rptLogs	[3,[{data:[3],topics:Evt,logIndex:0},{data:[2],topics:Evt,logIndex:1},{data:[1],topics:Evt,logIndex:2}]]			
	x		get logs-eth_getLogs	Smoke-17	requestMethod.eth_getLogs	[{fromBlock:_startBlockNumber}]			
	x		validate log events #	Smoke-17-vali	validFormat	[length,3]			
	x		helper prepare contract function calls	helper	helper.prepareContractCall	[addr]			
	x	x	eth_call methods	Smoke-3	requestMethod.eth_call	[{to:_contractAddress}]			
	x		validate response for eth_call	Smoke-30-vali	validFormat	[equal,_contractAddress]			
	x		get Storage At	Smoke-18	requestMethod.eth_getStorageAt	[_contractAddress,0,latest]			
	x		validate response for eth_getStorageAt	Smoke-18-vali	validFormat	[equal,0x000000000000000000000000000004b0]			
									
									
smoke eth_getTransactionCount 	x								
	x		create a new Account with password	Smoke-20-Pre-new account	requestMethod.personal_newAccount	[password]		result=>newAccount	acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
	x		unlock account to send tx	Smoke-20-prepare-coin-newAcc-unlock	requestMethod.personal_unlockAccount	[_acc1,password,10]			
	x		send some coins to new account for the rest steps	Smoke-20-prepare-coin-newAcc	requestMethod.eth_sendTransaction	[{to:_newAccount,from:_acc1,value:100000000000000000,gas:21000}]		result=>txHash	
	x		wait for tx mined	Smoke-20-wait-accountGetMoney	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		get current blockNumber	Smoke-20-get-current blocknumber	requestMethod.eth_blockNumber	[]		result=>startBlock	
	x		unlock the new Account	Smoke-20-Unlock-new	requestMethod.personal_unlockAccount	[_newAccount,password,120]			
	x		send transaction using new account by eth_sendTransaction	Smoke-20-eth_sendtx	requestMethod.eth_sendTransaction	[{from:_newAccount,to:_acc1,value:10}]			
									
									
smoke eth_sendTransaction	x	x							
	x		sign a transaction using eth_signTransaction	Smoke-20-presignedtx	requestMethod.eth_signTransaction	[{from:_newAccount,to:_acc1,value:0x10}]		result.raw=>rawTx	
	x		send signed transaction	Smoke-20-sendsignedtx	requestMethod.eth_sendRawTransaction	[_rawTx]		result=>txHash	
	x		get receipt	Smoke-20-wait-lasttx-mined	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		get tx count for the new account at current block #	Smoke-20-latest	requestMethod.eth_getTransactionCount	[_newAccount,latest]			
	x		validate response for eth_txCount	Smoke-20-latest-vali	validFormat	[equal,0x2]			
	x		get tx count for the new account at startBlock #	Smoke-20-startblock	requestMethod.eth_getTransactionCount	[_newAccount,_startBlock]			
	x		validate response for eth_txCount at startBlock #	Smoke-20-startblock-vali	validFormat	[equal,0x0]			
smoke eth_getTransactionCount – easlist, pending	x	x							
	x		get tx count for the new account at startBlock #	Smoke-20-pending	requestMethod.eth_getTransactionCount	[_newAccount,pending]			
	x		validate response for eth_txCount at startBlock #	Smoke-20-pending-vali	validFormat	[equal,0x2]			
	x		get tx count for the new account at startBlock #	Smoke-20-earliest	requestMethod.eth_getTransactionCount	[_newAccount,earliest]			
	x		validate response for eth_txCount at startBlock #	Smoke-20-earliest-vali	validFormat	[equal,0x0]			
									
smoke filter:eth_newBlockFilter	x								
	x		create a new block filter	Smoke-24	requestMethod.eth_newBlockFilter	[]		result=>filterID	
	x		validate response for eth_newBlockFilter	smoke-24-valid	validFormat	[match,HEX]			
	x		get current blockNumber	Smoke-24-getStartBlocknumber	requestMethod.eth_blockNumber	[]		result=>startBlock	
	x		wait for half minutes( 30 seconds )	Smoke-helper-delay-30sec	helper.delay	[30]			
	x		get current blockNumber – after 1 min	Smoke-24-getEndBlocknumber	requestMethod.eth_blockNumber	[]		result=>endBlock	
	x		Get block filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterChanges	[_filterID]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,_startBlock,_endBlock]			
	x		uninstall the filter	Smoke-35	requestMethod.eth_uninstallFilter	[_filterID]			
	x		validate response – eth_uninstallFiler	Smoke-35-vali	validFormat	[equal,true]			
	x		wait for half minutes( 30 seconds )	Smoke-helper-delay-30sec	helper.delay	[30]			
	x		Get uninstalled block filter changes by calling eth_getFilterChanges	Smoke-15-removed	requestMethod.eth_getFilterChanges	[_filterID]			
	x		validate response for eth_filterChanges	Smoke-15-removed-vali	validFormat	[length,0]			
									
smoke filter:eth_newPendingTx	x								
	x		create a newPendingTransactionFilter	Smoke-26	requestMethod.eth_newPendingTransactionFilter	[]		result=>filterID	acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334,acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		validate response for eth_newPendingTransactionFilter	Smoke-26-vali	validFormat	[match,HEX]			
	x		sign a tx 1	Smoke-26-personalsigntx1	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:1},password]		result.raw=>rawTx1	
	x		sign a tx 2	Smoke-26-personalsigntx2	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:100},password]		result.raw=>rawTx2	
	x		sign a tx 3	Smoke-26-personalsigntx3	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:100},password]		result.raw=>rawTx3	
	x		send signed tx 3	Smoke-26-sendRaw3	requestMethod.eth_sendRawTransaction	[_rawTx3]			
	x		send signed tx 2	Smoke-26-sendRaw2	requestMethod.eth_sendRawTransaction	[_rawTx2]			
	x		send signed tx 1	Smoke-26-sendRaw1	requestMethod.eth_sendRawTransaction	[_rawTx1]			
	x		delay for 2 sec	Helper-delay-2	helper.delay	[2]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterChanges	[_filterID]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,3]			
	x		uninstall the filter	Smoke-35	requestMethod.eth_uninstallFilter	[_filterID]			
	x		validate response – eth_uninstallFiler	Smoke-35-vali	validFormat	[equal,true]			
	x		sign a tx 1 – uninstalled pending tx filter	Smoke-26-personalsigntx1-removed	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:1},password]		result.raw=>rawTx1	
	x		sign a tx 2 – uninstalled pending tx filter	Smoke-26-personalsigntx2-removed	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:100},password]		result.raw=>rawTx2	
	x		sign a tx 3 – uninstalled pending tx filter	Smoke-26-personalsigntx3-removed	requestMethod.personal_signTransaction	[{from:_acc1,to:_acc2,value:100},password]		result.raw=>rawTx3	
	x		send signed tx 3	Smoke-26-sendRaw3-removed	requestMethod.eth_sendRawTransaction	[_rawTx3]			
	x		send signed tx 2	Smoke-26-sendRaw2-removed	requestMethod.eth_sendRawTransaction	[_rawTx2]			
	x		send signed tx 1	Smoke-26-sendRaw1-removed	requestMethod.eth_sendRawTransaction	[_rawTx1]			
	x		delay for 2 sec	Helper-delay-2	helper.delay	[2]			
	x		Get uninstalled pendingTx filter changes by calling eth_getFilterChanges	Smoke-15-removed	requestMethod.eth_getFilterChanges	[_filterID]			
	x		validate response for eth_filterChanges	Smoke-15-removed-vali	validFormat	[length,0]			
									
Smoke filter:eth_newFilter	x								
	x		getCoinBase Account as the contract sender	Smoke-25-getCoinbase	requestMethod.eth_coinbase	[]		result=>sender	
	x		get fromBlock by eth_getBlockNumber	Smoke-25-getBlockNumber	requestMethod.eth_blockNumber	[]		result=>fromBlock	
	x		create a new filter	Smoke-25	requestMethod.eth_newFilter	[{fromBlock:_fromBlock,toBlock:latest}]		result=>filterID1	
	x		validate response for eth_newFilter	Smoke-25-vali	validFormat	[match,HEX]			
	x		compile contract	Smoke-25-compile	requestMethod.eth_compileSolidity	recursive.sol			
	x		helper function to compose the contract	helper	helper.newContract	[Recursive]			
	x		unlock account to send contract	Smoke-25-deploy-pre	requestMethod.personal_unlockAccount	[_sender,password,999]			
	x	x	deploy the contract	Smoke-25-deploy	requestMethod.eth_sendTransaction	[{from:_sender,gas:5000000}]		result=>txHash	
	x		get contract receipt	Smoke-40-21	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		helper prepare contract function calls	helper	helper.prepareContractCall	[f,_contractAddress,4]			
	x	x	send a method of a contract	smoke-40-fun-call	requestMethod.eth_sendTransaction	[{from:_sender,to:_contractAddress,gas:2000000}]		result=>txHash	
	x		get contract function call method receipt	Smoke-40-21-func-call	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterChanges	[_filterID1]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,4]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterLogs	[_filterID1]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,4]			
	x		helper get topic signature	helper	helper.getEvent	Evt			
	x	x	create  new filter with fromBlock, toBlock, topics, address	Smoke-25-full	requestMethod.eth_newFilter	[{fromBlock:_fromBlock,toBlock:latest,address:_contractAddress}]		result=>filterID2	
	x		validate response for eth_newFilter	Smoke-25-full-vali	validFormat	[match,HEX]			
	x		helper prepare contract function calls – f 2	helper	helper.prepareContractCall	[f,_contractAddress,2]			
	x	x	send a method of a contract – f 2	smoke-40-fun-call	requestMethod.eth_sendTransaction	[{from:_sender,to:_contractAddress,gas:2000000}]		result=>txHash	
	x		get contract function call method receipt	Smoke-40-21-func-call	requestMethod.eth_getTransactionReceipt	[_txHash]		result.blockNumber=>blockNumber	
	x		getBlockNumber	Smoke_getBlockNumber	requestMethod.eth_getBlockByNumber	[_blockNumber,true]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterChanges	[_filterID1]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,2]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterLogs	[_filterID1]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,6]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterChanges	[_filterID2]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,6]			
	x		Get pendingTX filter changes by calling eth_getFilterChanges	Smoke-15	requestMethod.eth_getFilterLogs	[_filterID2]			
	x		validate response for eth_filterChanges	Smoke-15-vali	validFormat	[length,6]			
	x		uninstall the filter	Smoke-35	requestMethod.eth_uninstallFilter	[_filterID1]			
	x		validate response – eth_uninstallFiler	Smoke-35-vali	validFormat	[equal,true]			
	x		uninstall the filter	Smoke-35	requestMethod.eth_uninstallFilter	[_filterID2]			
	x		validate response – eth_uninstallFiler	Smoke-35-vali	validFormat	[equal,true]			
									
Smoke eth_getTransactionByBlockNumber/HashAndIndex	x								
	x		Pre-step:unlock the account	Pre-x	requestMethod.personal_unlockAccount	[_acc1,password,123]			acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334,acc2=0xa00a2d0d10ce8a2ea47a76fbb935405df2a12b0e2bc932f188f84b5f16da9c2c
	x		Pre-step: send a transaction	Pre-0	requestMethod.eth_sendTransaction	[{from:_acc1,to:_acc2,value:123}]		result=>txHash	
	x		Pre-step:wait for tx mined	Pre-1	requestMethod.eth_getTransactionReceipt	[_txHash]		result.blockNumber=>blockNumber,result.blockHash=>blockHash	
	x		get the tx in the latest block index=0x1	smoke-blocknNumberIndex-latest-0x1	requestMethod.eth_getTransactionByBlockNumberAndIndex	[latest,0x0]			
	x		validate response	smoke-blocknNumberIndex-latest-0x1-vali	validFormat	[matches,VALID_TX]			
	x		get the tx in the latest block index=1	Smoke-blocknNumberIndex-latest-1	requestMethod.eth_getTransactionByBlockNumberAndIndex	[latest,0]			
	x		validate response	Smoke-blocknNumberIndex-latest-1-vali	validFormat	[matches,VALID_TX]			
	x		get the tx in the given # block index=0x1	smoke-blocknNumberIndex-#-0x1	requestMethod.eth_getTransactionByBlockNumberAndIndex	[_blockNumber,0x0]			
	x		validate response	smoke-blocknNumberIndex-#-0x1-vali	validFormat	[matches,VALID_TX]			
	x		get the tx in the given hash block index=0x1	Smoke-blocknHashIndex-0x1	requestMethod.eth_getTransactionByBlockHashAndIndex	[_blockHash,0x0]			
	x		validate response	Smoke-blocknHashIndex-0x1-vali	validFormat	[matches,VALID_TX]			
	x		get the tx in the given # block index=1	Smoke-blocknNumberIndex-#-1	requestMethod.eth_getTransactionByBlockNumberAndIndex	[_blockNumber,0]			
	x		validate response	Smoke-blocknNumberIndex-#-1-vali	validFormat	[matches,VALID_TX]			
	x		get the tx in the given hash block index=1	Smoke-blocknHashIndex-1	requestMethod.eth_getTransactionByBlockHashAndIndex	[_blockHash,0]			
	x		validate response	Smoke-blocknHashIndex-1-vali	validFormat	[matches,VALID_TX]			
									
Smoke other: getMinerStats	x								
	x		get coinbase	Smoke-other-1	requestMethod.eth_coinbase	[]		result=>coinbase	acc1=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
	x		get MinerStats with non-coinbase	Smoke-other-getMinerStats-nonCoinBase	requestMethod.getMinerStats	[_acc1]			
	x		validate response for miner Stats	Smoke-other-getMinerStats-nonCoinBase-vali	validationFunction.minerStats	_acc1			
	x		get MinerStats with coinbase	Smoke-other-getMinerStats-coinbase	requestMethod.getMinerStats	[_coinbase]			
	x		validate response for miner Stats	Smoke-other-getMinerStats-coinbase-vali	validationFunction.minerStats	_coinbase			
									
Smoke mining pool:	x								
	x		get Block Template with empty array	Smoke-getBlockTemplate-emptyArr	requestMethod.getblocktemplate	[]			
	x		validate response	Smoke-getBlockTemplate-emptyArr-vali	validFormat	[matches,VALID_WORKTEMPLATE]			
	x		get Block Template with null params	Smoke-getBlockTemplate-null	requestMethod.getblocktemplate	null			
	x		validate response	Smoke-getBlockTemplate-null-vali	validFormat	[matches,VALID_WORKTEMPLATE]			
	x		get Block Template with capabilities and rules	Smoke-getBlockTemplate-cap&rules	requestMethod.getblocktemplate	[{capabilities:[],rules:[]}]			
	x		validate response	Smoke-getBlockTemplate-cap&rules-vali	validFormat	[matches,VALID_WORKTEMPLATE]			
	x		get Block Template with empty object	Smoke-getBlockTemplate-emptyObj	requestMethod.getblocktemplate	[{}]			
	x		validate response	Smoke-getBlockTemplate-emptyObj-vali	validFormat	[error]			
	x		Smoke-other-9	Smoke-getHeader	requestMethod.getHeaderByBlockNumber	[_headerHeight]			
	x		validate response	Smoke-getHeader-vali	validFormat	[matches,VALID_BLOCK_HEADER]			
	x		Helper – remove 0x prefix	helper	helper.data0xPrefix	[false,headerNonce,solution,headerHash]			
	x		Smoke-other-10	Smoke-submit-block-no-0x	requestMethod.submitblock	[_headerNonce,_solution,_headerHash]			
	x		validate response	Smoke-submit-block-no-0x-vali	validFormat	[equal,false]			
	x		Helper – add 0x prefix	helper	helper.data0xPrefix	[true,headerNonce,solution,headerHash]			
	x		Smoke-other-11	Smoke-submit-block-0x	requestMethod.submitblock	[_headerNonce,_solution,_headerHash]			
	x		validate response	Smoke-submit-block-0x-vali	validFormat	[equal,false]			
									
									
									
Smoke eth_hashrate and eth_submitHashrate (rk-124 & rk-125)									
			Smoke test for eth_submitHashrate	Smoke-eth_submitHashrate	requestMethod.eth_submitHashrate	[0x1010,0x0101010101010101010101010101010101010101010101010101010101010101]			
			Smoke test for eth_submitHashrate	Smoke-eth_submitHashrate	requestMethod.eth_submitHashrate	[0x101,0x0101010101010101010101010101010101010101010101010101010101010101]			
			validate response for eth_submitHashrate	Smoke-eth_submitHashrate-vali	validFormat	[equal,true]			
			get miner hashrate	Smoke-22	requestMethod.eth_hashrate	[]			
			validate response	Smoke-22-vali	validFormat	[matches,HEX]			
			get miner hashrate	Smoke-22	requestMethod.eth_hashrate	[]			
			validate response	Smoke-22-vali	validFormat	[matches,HEX]			
